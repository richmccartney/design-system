/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface SpdButton {
    /**
    * Defines the aria label content
    */
    'ariaLabel': string;
    /**
    * Sets the ID of the button element
    */
    'buttonId'?: string;
    /**
    * If `true`, the user cannot interact with the button.
    */
    'disabled': boolean;
    /**
    * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
    */
    'download': string | undefined;
    /**
    * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
    */
    'href': string;
    /**
    * Name type of the button
    */
    'name': 'default' | 'primary' | 'positive' | 'negative' | 'link';
    /**
    * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
    */
    'rel': string | undefined;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target': string | undefined;
    /**
    * The type of button
    */
    'type': 'submit' | 'reset' | 'button';
    /**
    * Sets a value on the button
    */
    'value': string | undefined;
  }
  interface SpdHeader {}
}

declare global {


  interface HTMLSpdButtonElement extends Components.SpdButton, HTMLStencilElement {}
  var HTMLSpdButtonElement: {
    prototype: HTMLSpdButtonElement;
    new (): HTMLSpdButtonElement;
  };

  interface HTMLSpdHeaderElement extends Components.SpdHeader, HTMLStencilElement {}
  var HTMLSpdHeaderElement: {
    prototype: HTMLSpdHeaderElement;
    new (): HTMLSpdHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'spd-button': HTMLSpdButtonElement;
    'spd-header': HTMLSpdHeaderElement;
  }
}

declare namespace LocalJSX {
  interface SpdButton {
    /**
    * Defines the aria label content
    */
    'ariaLabel'?: string;
    /**
    * Sets the ID of the button element
    */
    'buttonId'?: string;
    /**
    * If `true`, the user cannot interact with the button.
    */
    'disabled'?: boolean;
    /**
    * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
    */
    'download'?: string | undefined;
    /**
    * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
    */
    'href'?: string;
    /**
    * Name type of the button
    */
    'name'?: 'default' | 'primary' | 'positive' | 'negative' | 'link';
    /**
    * Emitted when the button loses focus.
    */
    'onIsBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the button has focus.
    */
    'onIsFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
    */
    'rel'?: string | undefined;
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target'?: string | undefined;
    /**
    * The type of button
    */
    'type'?: 'submit' | 'reset' | 'button';
    /**
    * Sets a value on the button
    */
    'value'?: string | undefined;
  }
  interface SpdHeader {}

  interface IntrinsicElements {
    'spd-button': SpdButton;
    'spd-header': SpdHeader;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'spd-button': LocalJSX.SpdButton & JSXBase.HTMLAttributes<HTMLSpdButtonElement>;
      'spd-header': LocalJSX.SpdHeader & JSXBase.HTMLAttributes<HTMLSpdHeaderElement>;
    }
  }
}


